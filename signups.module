<?php
/**
 * @file
 * handle some stuff related to signing up for classes and volunteer
 * assignments
 */

// the node ids of the period nodes
define(BEFORE, 489);
define(PERIOD1, 490);
define(PERIOD2, 492);
define(LUNCH, 494);
define(PERIOD3, 496);
define(PERIOD4, 498);
define(AFTER, 499);
// the role ids for certain roles
define(PAID, 8);
define(MEMBER, 7);
// the possible problems in signups
define(MISSING, 'MISSING');
define(DOUBLE, 'DOUBLE');

/**
 * implementation of hook_help()
 */
function signups_help ($path, $arg) {
  if ($path == 'admin/help#schedule') {
    $txt = 'This module handles some stuff related to signing '.
           'up for classes and volunteer assignments.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_menu()
 */
function signups_menu () {
   // a page for getting signups for all paid members
   $items['admin/signups_get_paid/%'] = array(
   	 'title' => 'Get Signups',
     'page callback' => '_get_signups_paid',
     'page arguments' => array(2),
     'access arguments' => array('administer site configuration'),
     'type' => MENU_CALLBACK,
   );
   // a page for checking existing signups
   $items['admin/signups_get_members/%'] = array(
   	 'title' => 'Get Signups',
     'page callback' => '_get_signups_members',
     'page arguments' => array(2),
     'access arguments' => array('administer site configuration'),
     'type' => MENU_CALLBACK,
   );

   return $items;
}

/**
 * callback for getting signups for all paid members
 * @param int $session_nid the node id of the session
 */
function _get_signups_paid ($session_nid) {
  return _get_signups($session_nid, PAID);
}

/**
 * callback for getting signups for all members
 * @param int $session_nid the node id of the session
 */
function _get_signups_members ($session_nid) {
  return _get_signups($session_nid, MEMBER);
}

/**
 * get the signups for every person with the given role for the given session
 * @param int $session_nid the node id of the session (if 0, use the default
 *        session for new courses)
 * @param int $role_id the role id to use
 * @return the html formatted output
 */
function _get_signups ($session_nid, $role_id) {
  if ($session_nid == '0') {
    // get the default session for new courses to use as the current session
    module_load_include('inc', 'content', 'includes/content.crud');
    $fields = content_field_instance_read(array('type_name' => 'course',
                                                'field_name' => 'field_course_session'));
    $session_nid = $fields[0]['widget']['default_value'][0]['nid'];
  }

  // get the list of all paid member families
  $query = db_query('SELECT node.nid AS family_nid, '.
                    'node.title AS family_name '.
                    'FROM {node} AS node '.
                    'INNER JOIN {users_roles} as roles '.
                    'ON node.uid=roles.uid '.
                    'WHERE type=\'family\' AND rid = '. $role_id .' '.
                    'ORDER BY node.title ASC');
  $signups = array();
  // loop through all paid families
  while ($row = db_fetch_array($query)) {
    // generate the schedule for this family (could probably have made a query to do
    // this all at once, but don't see the point
    $signups[$row['family_name']] = _signups_get_schedule_family($session_nid, $row['family_nid']);
  }
  return _signups_print_page($signups);
}

/**
 * get the schedule for one family (including course signups and jobs)
 * @param int $session_nid the node id of the session
 * @param int $family_nid the node id of the family in question
 * @return an array containing the signup information for this family -- with one
 *         entry for each person, indexed by their name
 */
function _signups_get_schedule_family ($session_nid, $family_nid) {
  $signups = array();

  // first, get all people in this family that need an assignment each period
  $query = db_query('SELECT node.nid AS person_nid, '.
                    'node.title AS name '.
                    'FROM {node} AS node '.
                    'JOIN {content_field_person_family} AS family '.
                    'ON node.vid = family.vid '.
                    'JOIN {content_field_person_no_assignment} AS gone '.
                    'ON node.vid = gone.vid '.
                    'WHERE (type=\'child\' or type=\'adult\') '.
                    'AND gone.field_person_no_assignment_value = \'No\' '.
                    'AND family.nid=node.nid AND field_person_family_nid='. $family_nid .' '.
                    'ORDER BY node.title ASC');
  // each person is a row
  while ($row = db_fetch_array($query)) {
    $signups[$row['name']] = _signups_get_schedule_person($session_nid, $row['person_nid']);
  }
  return $signups;
}

/**
 * get the schedule for one person, including course signups and volunteer signups
 * @param int $session_nid the node id of the session
 * @param int $person_nid the node id of the person
 * @return array the information for this person in the form of an array with one element for each period
 */
function _signups_get_schedule_person ($session_nid, $person_nid) {
  $signups = array();
  $signups['points'] = 0;
  $signups['fees'] = 0;

  // *****************************
  // START WITH THE COURSE SIGNUPS

  $select = 'SELECT signup_course_field.field_signup_course_nid AS course_nid, '.
            'signup_node.nid AS signup_nid ';
  $from = 'FROM {node} AS signup_node ';
  // get access to the course field (so we can get the course nid to be used
  // in a separate query because this one is already too complex)
  $join_course = 'JOIN {content_type_course_signup} AS signup_course_field '.
                 'ON signup_node.vid = signup_course_field.vid ';
  // get access to the person field (so we can filter for the right person)
  $join_person = 'JOIN {content_field_person} AS signup_person_field '.
                 'ON signup_node.vid = signup_person_field.vid ';
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = 'JOIN {content_field_course_session} AS course_session_field '.
                  'ON course_session_field.nid = '.
                  'signup_course_field.field_signup_course_nid ';
  $where_type = 'WHERE signup_node.type=\'course_signup\' ';
  $where_person = 'AND signup_person_field.field_person_nid = '. $person_nid .' ';
  $where_session = 'AND course_session_field.field_course_session_nid = '. $session_nid;

  // get the course signups for this person
  $query = db_query($select . $from . $join_course . $join_person . $join_session .
                    $where_type . $where_person . $where_session);

  // each row is one course for this person from this session.
  while ($row = db_fetch_array($query)) {
    // now get the title of the course and the period it is in
    $course = db_fetch_array(db_query('SELECT course_node.title AS course, '.
                                      'course_period_field.field_course_period_nid AS period_nid, '.
                                      'course_fee_field.field_course_fee_value AS fee '.
                                      'FROM {node} AS course_node '.
                                      'JOIN {content_type_course} AS course_period_field '.
                                      'ON course_node.vid = course_period_field.vid '.
                                      'JOIN {content_field_course_fee} AS course_fee_field '.
                                      'ON course_node.vid = course_fee_field.vid '.
                                      'WHERE course_node.nid = '. $row['course_nid']));
    // check if this is a double signup
    $period = $course['period_nid'];
    if (isset($signups[$period])) {
      if (!isset($signups['issues'])) $signups['issues']['count'] = 0;
      $count = $signups['issues']['count']++;
      $signups['issues'][$count]['problem'] = DOUBLE;
      $signups['issues'][$count]['period'] = $period;
      $signups['issues'][$count]['course1'] = $course['course'];
      $signups['issues'][$count]['signup1'] = $row['signup_nid'];
      $signups['issues'][$count]['course2'] = $signups[$period]['course'];
      $signups['issues'][$count]['signup2'] = $signups[$period]['signup'];
    } else { // not a double -- just store the info
      $signups[$period]['course'] = $course['course'];
      $signups[$period]['signup'] = $row['signup_nid'];
      $signups['fees'] += $course['fee'];
    }
  }

  // *****************************
  // NOW DO THE VOLUNTEER SIGNUPS FOR THE SAME PERSON

  $select = 'SELECT signup_fields.field_vol_job_nid AS job_nid, '.
            'signup_node.nid AS signup_nid, '.
            'signup_fields.field_vol_signup_course_nid AS course_nid ';
  $from = 'FROM {node} AS signup_node ';
  // get access to the signup fields
  $join_signup = 'JOIN {content_type_volunteer_signup} AS signup_fields '.
                 'ON signup_node.vid = signup_fields.vid ';
  // get access to the person field (so we can filter for the right person)
  $join_person = 'JOIN {content_field_person} AS signup_person_field '.
                 'ON signup_node.vid = signup_person_field.vid ';
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = 'JOIN {content_field_course_session} AS course_session_field '.
                  'ON course_session_field.nid = '.
                  'signup_fields.field_vol_signup_course_nid ';
  $where_type = 'WHERE signup_node.type=\'volunteer_signup\' ';
  $where_person = 'AND signup_person_field.field_person_nid = '. $person_nid .' ';
  $where_session = 'AND course_session_field.field_course_session_nid = '. $session_nid;

  $query = db_query($select . $from . $join_signup . $join_person . $join_session .
                    $where_type . $where_person . $where_session);

  // each row is one job for this person from this session.
  while ($row = db_fetch_array($query)) {
    // get the info about the course
    $course = db_fetch_array(db_query('SELECT course_node.title AS course, '.
                                      'course_period_field.field_course_period_nid AS period_nid '.
                                      'FROM {node} as course_node '.
                                      'JOIN {content_type_course} as course_period_field '.
                                      'ON course_node.vid = course_period_field.vid '.
                                      'WHERE course_node.nid = '. $row['course_nid']));
    $period = $course['period_nid'];

    // check if this is a double signup
    if (isset($signups[$period])) {
      if (!isset($signups['issues'])) $signups['issues']['count'] = 0;
      $count = $signups['issues']['count']++;
      $signups['issues'][$count]['problem'] = DOUBLE;
      $signups['issues'][$count]['period'] = $period;
      $signups['issues'][$count]['course1'] = $course['course'];
      $signups['issues'][$count]['signup1'] = $row['signup_nid'];
      $signups['issues'][$count]['course2'] = $signups[$period]['course'];
      $signups['issues'][$count]['signup2'] = $signups[$period]['signup'];
    } else { // it's not a double, just store the info
      $signups[$period]['course'] = $course['course'];
      $signups[$period]['signup'] = $row['signup_nid'];
      // and the info about the job
      $job = db_fetch_array(db_query('SELECT job_node.title AS job, '.
                                     'job_fields.field_vol_job_points_value AS points '.
                                     'FROM {node} as job_node '.
                                     'JOIN {content_type_volunteer_job_type} AS job_fields '.
                                     'ON job_node.vid = job_fields.vid '.
                                     'WHERE job_node.nid = '. $row['job_nid']));
      $signups[$period]['job'] = $job['job'];
      $signups['points'] += $job['points'];
    }
  }

  // check if any of the required signups are missing
  foreach (array(PERIOD1, PERIOD2, PERIOD3, PERIOD4) as $period) {
    if (!isset($signups[$period])) {
      if (!isset($signups['issues']['count'])) $signups['issues']['count'] = 0;
      $count = $signups['issues']['count']++;
      $signups['issues'][$count]['problem'] = MISSING;
      $signups['issues'][$count]['period'] = $period;
    }
  }
  return $signups;
}

/**
 * print all of the issues
 */
function _signups_print_issues ($signups) {
  $result = '<h1>Issues</h1>';
  $result .= '<ul>';
  foreach ($signups as $family => $family_signups) {
    foreach ($family_signups as $person => $person_signups) {
      if (isset($person_signups['issues'])) {
        for ($i = 0; $i < $person_signups['issues']['count']; $i++) {
          $issue = $person_signups['issues'][$i];
          $result .= '<li> '. $family .': '. $person .': '. $issue['problem'];
          if ($issue['problem'] == MISSING) {
            $result .= ' '. _get_period_name($issue['period']);
          } else {
            $result .= ' '. _get_period_name($issue['period']) .' '.
                       "<a href=\"../../node/". $issue[signup1] ."\">".
                       $issue['course1'] .'</a> and '.
                       "<a href=\"../../node/". $issue[signup2] ."\">".
                       $issue['course2'] .'</a>';
          }
          $result .= '</li>';
        }
      }
    }
  }
  $result .= '</ul>';
  return $result;
}

/**
 * print the entire schedule page
 * @param array $signups the entire signups array, indexed first by family, then by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted listing of the information
 */
function _signups_print_page($signups) {
  $result = _signups_print_issues($signups);
  $result .= '<h1>All Signups</h1>';
  $result .= '<ul>';
  // loop through the families
  foreach ($signups as $family => $signups_for_family) {
    $result .= '<li>'. _signups_print_one_family($family, $signups_for_family) .'</li>';
  }
  $result .= '</ul>';
  return $result;
}

/**
 * print the schedule for one family
 * @param string $family the name of the family
 * @param array $signups the signup information for that family, indexed by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted html output of the schedule
 */
function _signups_print_one_family ($family, $signups) {
  // calculate points and for the family (they're already done per person)
  $points = 0;
  $fees = 0;
  foreach ($signups as $signups_for_person) {
    $points += $signups_for_person['points'];
    $fees += $signups_for_person['fees'];
  }
  $result = '<h1>'. $family .'</h1>';
  $result .= 'points: '. $points;
  if ($fees != 0) {
    $result .= sprintf(' fees: $%01.2f paypal: $%01.2f', $fees, ($fees+.3)/.971);
  }
  $result .= "<table border=\"1\">";
  $result .= '<tr><th></th><th>Before</th><th>Period 1</th><th>Period 2</th><th>Lunch</th>'.
             '<th>Period 3</th><th>Period 4</th><th>After</th></tr>';
  foreach ($signups as $person => $signups_for_person) {
    $result .= _signups_print_one_person($person, $signups_for_person);
  }
  $result .= '</table>';
  return $result;
}

/**
 * print the schedule for one person
 * @param string $name the name of the person
 * @param array $signups the array containing information about this person's signups, indexed
 *        by the period nid for each period (blank if there is no assignment for a given period)
 * @return a nicely formatted table row with the information for one person
 */
function _signups_print_one_person ($name, $signups) {
  $result = '<tr><th>'. $name .'</th>';
  $result .= _signups_print_one_period(BEFORE, $signups);
  $result .= _signups_print_one_period(PERIOD1, $signups);
  $result .= _signups_print_one_period(PERIOD2, $signups);
  $result .= _signups_print_one_period(LUNCH, $signups);
  $result .= _signups_print_one_period(PERIOD3, $signups);
  $result .= _signups_print_one_period(PERIOD4, $signups);
  $result .= _signups_print_one_period(AFTER, $signups);
  $result .= '</tr>';
  return $result;
}

/**
 * print one period for one family
 * @param period the period nid to be printed
 * @param array $signups the signups array for this person, indexed by period, then
 *              with elements for 'course' and optionally 'job'. A missing entry means
 *              there is no assignment for that period (which is legal, so handle
 *              it gracefully)
 * @return string the <td></td> enclosed information for this period
 */
function _signups_print_one_period ($period, $signups) {
  $result .= '<td>';
  if (isset($signups[$period])) {
    $result .= "<a href=\"../../node/". $signups[$period]['signup'] ."\">".
               $signups[$period]['course'] .'</a>';
    if (isset($signups[$period]['job'])) {
      $result .= "\n<em>". $signups[$period]['job'] .'</em>';
    }
  }
  $result .= '</td>';
  return $result;
}

/**
 * convert the period nid to a word
 * @param period_nid the node id of the period
 */
function _get_period_name ($period_nid) {
  switch ($period_nid) {
    case BEFORE:
      return "Before";
    case PERIOD1:
      return "Period 1";
    case PERIOD2:
      return "Period 2";
    case LUNCH:
      return "Lunch";
    case PERIOD3:
      return "Period 3";
    case PERIOD4:
      return "Period 4";
    case AFTER:
      return "After";
  }
}