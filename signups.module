<?php
/**
 * @file
 * handle some stuff related to signing up for classes and volunteer
 * assignments
 */

// the node ids of the period nodes
define(BEFORE, 489);
define(PERIOD1, 490);
define(PERIOD2, 492);
define(LUNCH, 494);
define(PERIOD3, 496);
define(PERIOD4, 498);
define(AFTER, 499);
// the role ids for certain roles
define(PAID, 8);
define(MEMBER, 7);
// the possible problems in signups
define(MISSING, 'MISSING');
define(DOUBLE, 'DOUBLE');
define(MISSING_PERSON, 'MISSING PERSON');
// the ids for certain jobs
define(TEACHER, 146);
define(TEACHING_ASSISTANT, 147);
define(ROOM_MONITOR, 148);

/**
 * implementation of hook_help()
 */
function signups_help ($path, $arg) {
  if ($path == 'admin/help#schedule') {
    $txt = 'This module handles some stuff related to signing '.
           'up for classes and volunteer assignments.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_menu()
 * this defines pages for this module
 * @return an array of the pages
 */
function signups_menu () {
   // a page for getting all signup information for a session
   $items['admin/signups/%'] = array(
   	 'title' => 'All Signup Information',
     'page callback' => '_get_signups',
     'page arguments' => array(2),
     'access arguments' => array('view all signup info'),
     'type' => MENU_CALLBACK,
   );
   // a page for getting all point information for a session
   $items['admin/points/%'] = array(
   	 'title' => 'Points Summary',
     'page callback' => '_get_points',
     'page arguments' => array(2),
     'access arguments' => array('view all signup info'),
     'type' => MENU_CALLBACK,
   );
   // a page for all fees to be paid
   $items['admin/fees_summary/%'] = array(
      'title' => 'Fees Summary',
      'page callback' => '_get_fees',
      'page arguments' => array(2),
      'access arguments' => array('view all signup info'),
      'type' => MENU_CALLBACK,
   );
   // a page to display all signup information for one family
   $items['schedule/family_schedule/%'] = array(
       'title' => 'Family Schedule',
       'page callback' => '_get_family_signups',
       'page arguments' => array(2),
       'access arguments' => array('view own schedule'),
       'type' => MENU_CALLBACK,
   );

   return $items;
}

/**
 * Implementation of hook_perm()
 * define which permissions to use for this module
 * @return array of permissions for this module
 */
function signups_perm () {
  return array('view own schedule',
               'view all signup info');
}

/**
 * get the signups for every person with the given role for the given session
 * @param int $session_name the name of the session (in the form of 2014 Winter)
 * @param int $role_id the role id to use
 * @return the html formatted output
 */
function _get_signups ($session_name) {
  $session_name = check_plain($session_name);

  // get the nid from the session_name
  $session_nid = _get_session_nid($session_name);

  if ($session_nid == -1) {
    return "<h1>Illegal session name: ". $session_name ."</h1>\n";
  }

  // get all signups, indexed by family name, then person name
  $signups = _get_sorted_signups($session_nid);

  return _print_page($signups);
}

/**
 * get (and print) the schedule for the current family
 *
 * @param string $session_name
 *          the session name in the form 2014 Winter
 * @return string the output for the page
 */
function _get_family_signups ($session_name) {
  $session_name = check_plain($session_name);

  // get the nid from the session_name
  $session_nid = _get_session_nid($session_name);

  if ($session_nid == -1) {
    return "<h1>Illegal session name: ". $session_name ."</h1>\n";
  }
  // get all signups, indexed by family name, then person name
  $signups = _get_sorted_signups ($session_nid);

  // get the current family
  $family = _get_current_family_name();

  $result = "<hr/><h1>PLEASE DO NOT PAY YOUR FEES UNTIL AN ANNOUNCEMENT IS MADE ON THE E-GROUP. " . "FEES LISTED ARE AN ESTIMATE AND ARE SUBJECT TO CHANGE. ".
      "CLASSES MAY BE CANCELED IF THEY DO NOT FILL.</h1><hr/>\n";
  $result .= _print_one_family($family, $signups['families'][$family]);
  $family_issues = _print_family_issues($family, $signups['families'][$family]);
  if ($family_issues != '') {
    $result .= "<h1>Issues</h1>\n";
    $result .= $family_issues;
  }
  return $result;
}

/**
 * print a point summary
 * @param name $session_name the name of the session in the form 2014 Winter
 * @return string the html string to print
 */
function _get_points ($session_name) {
  $session_name = check_plain($session_name);

  // get the nid from the session_name
  $session_nid = _get_session_nid($session_name);

  if ($session_nid == -1) {
    return "<h1>Illegal session name: ". $session_name ."</h1>\n";
  }
  // get all signups, indexed by family name, then person name
  $signups = _get_sorted_signups($session_nid);

  return _print_points($signups);
}

/**
 * print a fee summary
 * @param name $session_name the name of the session in the form 2014 Winter
 * @return string the html string to print
 */
function _get_fees ($session_name) {
  $session_name = check_plain($session_name);

  // get the nid from the session_name
  $session_nid = _get_session_nid($session_name);

  if ($session_nid == -1) {
    return "<h1>Illegal session name: ". $session_name ."</h1>\n";
  }

  // get signup info for fees owed
  $signups = _get_sorted_signups($session_nid);

  // now calculate fees to be paid to each teacher

  // query the database to get all courses for this session that have fees
  $course_query = db_query("SELECT node.title AS name, ".
      "node.nid AS course_nid, ".
      "fee_field.field_course_fee_value AS fee ".
      "FROM {node} AS node ".
      "JOIN {content_field_course_session} AS session_field ".
      "ON node.vid = session_field.vid ".
      "JOIN {content_field_course_fee} AS fee_field ".
      "ON node.vid = fee_field.vid ".
      "WHERE node.type = 'course' ".
      "AND fee_field.field_course_fee_value != 0 ".
      "AND session_field.field_course_session_nid = %d", $session_nid);
  $fees = array();
  while ($course = db_fetch_array($course_query)) {
    // First, count the signups for this course
    $signup_query = db_query("SELECT node.nid AS nid ".
        "FROM {node} AS node ".
        "JOIN {content_type_course_signup} AS course_field ".
        "ON node.vid = course_field.vid ".
        "WHERE node.type = 'course_signup' ".
        "AND course_field.field_signup_course_nid = %d", $course['course_nid']);
    $count = 0;
    while ($signup = db_fetch_array($signup_query)) {
      $count++;
    }
    $fees[$course['name']]['fees'] = $count * $course['fee'];
    $fees[$course['name']]['students'] = $count;

    // get the list of teachers
    $query_string = "SELECT person_node.title AS name ".
        "FROM {node} AS node ".
        // get access to the volunteer signup fields
        "JOIN {content_type_volunteer_signup} AS signup_fields ".
        "ON node.vid = signup_fields.vid ".
        // get access to the person (for the output)
        "JOIN {content_field_person} AS person_field ".
        "ON node.vid = person_field.vid ".
        // get the person's name
        "JOIN {node} AS person_node ".
        "ON person_node.nid = person_field.field_person_nid ".
        "WHERE node.type = 'volunteer_signup' ".
        "AND signup_fields.field_vol_signup_course_nid = %d ".
        "AND signup_fields.field_vol_job_nid = %d";
    $signup_query = db_query($query_string, $course['course_nid'], TEACHER);
    $teachers = '';
    while ($signup = db_fetch_array($signup_query)) {
      if ($teachers != '') $teachers .= ", ";
      $teachers .= $signup['name'];
    }
    // if there are no teachers, use TAs
    if ($teachers == '') {
      $signup_query = db_query($query_string . TEACHING_ASSISTANT);
      while ($signup = db_fetch_array($signup_query)) {
        if ($teachers != '') $teachers .= ", ";
        $teachers .= $signup['name'];
      }
    }
    // if there are still no teachers, use Room Monitors
    if ($teachers == '') {
      $signup_query = db_query($query_string . ROOM_MONITOR);
      while ($signup = db_fetch_array($signup_query)) {
        if ($teachers != '') $teachers .= ", ";
        $teachers .= $signup['name'];
      }
    }
    $fees[$course['name']]['teachers'] = $teachers;
  }
  return _print_fees($signups, $fees);
}

/**
 * get the name of the family for the current user
 * @return the text name of the family for the current user
 */
function _get_current_family_name () {
  global $user;

  $query = db_query("SELECT node.title AS name ".
      "FROM {node} AS node ".
      "WHERE node.type = 'family' AND node.uid = %d", $user->uid);
  $family = db_fetch_object($query);
  return $family->name;
}

/**
 * given the session name, return the session nid
 * @param string $session_name the session name in the form 2014 Winter
 * @return the session_nid. If $session_name is not a valid session, return -1
 */
function _get_session_nid ($session_name) {
  $query = db_query("SELECT node.nid AS nid ".
      "FROM {node} AS node ".
      "WHERE node.type = 'session' ".
      "AND node.title = '%s'", $session_name);
  $session = db_fetch_object($query);
  if (!$session) return -1;
  return $session->nid;
}

/**
 * get the signups, indexed by family name then person name. There will be two
 * top-level keys, 'issues' and 'families', with family information under 'families'
 * @param int $session_nid the session node id for the session whose signups
 *    to get
 * @return array of sorted signups
 */
function _get_sorted_signups ($session_nid) {
  // get all signups, indexed by person node id
  $signups = _get_signups_indexed_by_person($session_nid);

  // sort by family, and replace person node ids with names
  $sorted_signups = array();
  foreach ($signups as $person_nid => $person_signups) {
    // if person_nid is blank, it means a job with no one assigned yet
    // we've already stored the issue, just copy it over
    if ($person_nid === '') {
      $sorted_signups['issues'] = $person_signups['issues'];
    } else {
      $person = _get_person($person_nid);
      $family = $person->family_name;
      $sorted_signups['families'][$family]['nid'] = $person->family_nid;
      $sorted_signups['families'][$family]['fees'] += $person_signups['fees'];
      $sorted_signups['families'][$family]['points'] += $person_signups['points'];
      $sorted_signups['families'][$family]['people'][$person->name] = $person_signups;
    }
  }

  // check through the families to make sure that everyone who
  // needs an assignment has one. If there's someone who is completely missing, add them
  foreach ($sorted_signups['families'] as $family => $family_signups) {
    $query = db_query("SELECT node.nid AS person_nid ".
        "FROM {node} AS node ".
        "JOIN {content_field_person_family} AS family_field ".
        "ON node.vid = family_field.vid ".
        "JOIN {content_field_person_no_assignment} AS gone ".
        "ON node.vid = gone.vid ".
        "WHERE (type='child' or type='adult') ".
        "AND gone.field_person_no_assignment_value = 'No' ".
        "AND family_field.field_person_family_nid = %d", $family_signups['nid']);
    // for each person in this family who needs an assignment each period...
    while ($person_obj = db_fetch_array($query)) {
      // get the information for this person given the nid
      $person = _get_person($person_obj['person_nid']);
      // if that person has _no_ assignments, add them
      if (!isset($signups[$person_obj['person_nid']])) {
        $sorted_signups['families'][$person->family_name]['people'][$person->name] = array();
      }
      // check if any of the required periods are missing for this person
      foreach (array(PERIOD1, PERIOD2, PERIOD3, PERIOD4) as $period) {
        $person_signups = $sorted_signups['families'][$person->family_name]['people'][$person->name];
        if (!isset($sorted_signups['families'][$person->family_name]['people'][$person->name][$period])) {
          $count = count($sorted_signups['families'][$person->family_name]['people'][$person->name]['issues']);
          $sorted_signups['families'][$person->family_name]['people'][$person->name]['issues'][$count]['problem'] = MISSING;
          $sorted_signups['families'][$person->family_name]['people'][$person->name]['issues'][$count]['period'] = $period;
        }
      }
    }
    // sort the names within the family
    ksort($sorted_signups['families'][$family]['people']);
  }

  // sort the families by key (family name)
  ksort($sorted_signups['families']);
  return $sorted_signups;
}

/**
 * for the given person, query to get the name and family information
 * @param int $person_nid the person node id
 * @return the person array including 'name', 'family_name', and 'family_nid'
 */
function _get_person ($person_nid) {
  $query = db_query("SELECT node.title AS name, ".
      "family.title AS family_name, ".
      "family.nid AS family_nid ".
      "FROM {node} AS node ".
      "JOIN {content_field_person_family} AS family_field ".
      "ON node.vid = family_field.vid ".
      "JOIN {node} AS family ".
      "ON family.nid = family_field.field_person_family_nid ".
      "WHERE node.nid = %d", $person_nid);
  return db_fetch_object($query);
}

/**
 * get all the course signups and volunteer signups
 * @param int $session_nid the node id of the session
 * @return array the information, indexed by person node id. For each person, it's indexed
 *    by period node id. There's also fee and point information stored per person
 */
function _get_signups_indexed_by_person ($session_nid) {
  $signups = array();

  // *****************************
  // START WITH THE COURSE SIGNUPS

  // get all the course signups
  $query = _get_course_signup_query($session_nid);
  // get each signup for this this session.
  while ($signup = db_fetch_array($query)) {
    // now get the title of the course and the period it is in
    $course = db_fetch_array(db_query("SELECT course_node.title AS course, ".
        "course_period_field.field_course_period_nid AS period_nid, ".
        "course_fee_field.field_course_fee_value AS fee ".
        "FROM {node} AS course_node ".
        "JOIN {content_type_course} AS course_period_field ".
        "ON course_node.vid = course_period_field.vid ".
        "JOIN {content_field_course_fee} AS course_fee_field ".
        "ON course_node.vid = course_fee_field.vid ".
        "WHERE course_node.nid = %d", $signup['course_nid']));
    // check if this is a double signup
    $period = $course['period_nid'];
    $person = $signup['person_nid'];
    // if this is the first entry for this person, initialize counts
    if (!isset($signups[$person])) {
      $signups[$person]['points'] = 0;
      $signups[$person]['fees'] = 0;
    }

    if (isset($signups[$person][$period])) {
      $count = count($signups[$person]['issues']);
      $signups[$person]['issues'][$count]['problem'] = DOUBLE;
      $signups[$person]['issues'][$count]['period'] = $period;
      $signups[$person]['issues'][$count]['course1'] = $course['course'];
      $signups[$person]['issues'][$count]['signup1'] = $signup['signup_nid'];
      $signups[$person]['issues'][$count]['course2'] = $signups[$person][$period]['course'];
      $signups[$person]['issues'][$count]['signup2'] = $signups[$person][$period]['signup'];
    } else { // not a double
      // if there is no person for this signup, store the issue
      if ($person == '') {
        $count = count($signups[$person]['issues']);
        $signups[$person]['issues'][$count]['problem'] = MISSING_PERSON;
        $signups[$person]['issues'][$count]['period'] = $period;
        $signups[$person]['issues'][$count]['course'] = $course['course'];
        $signups[$person]['issues'][$count]['signup'] = $signup['signup_nid'];
      } else { // this is a good signup, store the info
        $signups[$person][$period]['course'] = $course['course'];
        $signups[$person][$period]['signup'] = $signup['signup_nid'];
        $signups[$person]['fees'] += $course['fee'];
      }
    }
  }

  // *****************************
  // NOW DO THE VOLUNTEER SIGNUPS FOR THE SAME PERSON

  $query = _get_volunteer_signup_query($session_nid);
  // get each job for this person from this session.
  while ($signup = db_fetch_array($query)) {
    // get the info about the course
    $course = db_fetch_array(db_query("SELECT course_node.title AS course, ".
        "course_period_field.field_course_period_nid AS period_nid ".
        "FROM {node} as course_node ".
        "JOIN {content_type_course} as course_period_field ".
        "ON course_node.vid = course_period_field.vid ".
        "WHERE course_node.nid = %d", $signup['course_nid']));
    $period = $course['period_nid'];
    $person = $signup['person_nid'];
    // if this is the first entry for this person, initialize counts
    if (!isset($signups[$person])) {
      $signups[$person]['points'] = 0;
      $signups[$person]['fees'] = 0;
    }

    // if there is a person assigned to this job,
    // check if this is a double signup
    if ($person != '' && isset($signups[$person][$period])) {
      $count = count($signups[$person]['issues']);
      $signups[$person]['issues'][$count]['problem'] = DOUBLE;
      $signups[$person]['issues'][$count]['period'] = $period;
      $signups[$person]['issues'][$count]['course1'] = $course['course'];
      $signups[$person]['issues'][$count]['signup1'] = $signup['signup_nid'];
      $signups[$person]['issues'][$count]['course2'] = $signups[$person][$period]['course'];
      $signups[$person]['issues'][$count]['signup2'] = $signups[$person][$period]['signup'];
    } else { // it's not a double
      // get the info about the job
      $job = db_fetch_array(db_query("SELECT job_node.title AS job, ".
          "job_fields.field_vol_job_points_value AS points ".
          "FROM {node} as job_node ".
          "JOIN {content_type_volunteer_job_type} AS job_fields ".
          "ON job_node.vid = job_fields.vid ".
          "WHERE job_node.nid = %d", $signup['job_nid']));
      // if there is no person for this job, store the issue
      if ($person == '') {
        $count = count($signups[$person]['issues']);
        $signups[$person]['issues'][$count]['problem'] = MISSING_PERSON;
        $signups[$person]['issues'][$count]['period'] = $period;
        $signups[$person]['issues'][$count]['course'] = $course['course'];
        $signups[$person]['issues'][$count]['signup'] = $signup['signup_nid'];
        $signups[$person]['issues'][$count]['job'] = $job['job'];
      } else { // there is a person for this job, and it's not a double
        // so just store the info
        $signups[$person][$period]['course'] = $course['course'];
        $signups[$person][$period]['signup'] = $signup['signup_nid'];
        $signups[$person][$period]['job'] = $job['job'];
        $signups[$person]['points'] += $job['points'];
      }
    }
  }

  return $signups;
}

/**
 * build the query for course signups
 * @param int $session_nid the node id of the session
 * @return the db_query object to use with db_fetch_array
 *        the query will return 'course_nid', 'signup_nid',
 *        'person_nid'
 */
function _get_course_signup_query ($session_nid) {
  $select = "SELECT signup_course_field.field_signup_course_nid AS course_nid, ".
            "signup_node.nid AS signup_nid, ".
            "signup_person_field.field_person_nid AS person_nid ";
  $from = "FROM {node} AS signup_node ";
  // get access to the course field (so we can get the course nid to be used
  // in a separate query because this one is already too complex)
  $join_course = "JOIN {content_type_course_signup} AS signup_course_field ".
                 "ON signup_node.vid = signup_course_field.vid ";
  // get access to the person field (so we can sort by person)
  $join_person = "JOIN {content_field_person} AS signup_person_field ".
                 "ON signup_node.vid = signup_person_field.vid ";
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = "JOIN {content_field_course_session} AS course_session_field ".
                  "ON course_session_field.nid = ".
                  "signup_course_field.field_signup_course_nid ";
  $where_type = "WHERE signup_node.type='course_signup' ";
  $where_session = "AND course_session_field.field_course_session_nid = %d";

  // get the course signups for this person
  $query = db_query($select . $from . $join_course . $join_person . $join_session .
                    $where_type . $where_session, $session_nid);

  return $query;
}

/**
 * build the query for course signups
 * @param int $session_nid the node id of the session
 * @return the db_query object to use with db_fetch_array
 *        the query will return 'job_nid', 'signup_nid',
 *        'person_nid', and 'course_nid'
 */
function _get_volunteer_signup_query ($session_nid) {
  $select = "SELECT signup_fields.field_vol_job_nid AS job_nid, ".
      "signup_node.nid AS signup_nid, ".
      "signup_person_field.field_person_nid AS person_nid, ".
      "signup_fields.field_vol_signup_course_nid AS course_nid ";
  $from = "FROM {node} AS signup_node ";
  // get access to the signup fields
  $join_signup = "JOIN {content_type_volunteer_signup} AS signup_fields ".
      "ON signup_node.vid = signup_fields.vid ";
  // get access to the person field (so we can filter for the right person)
  $join_person = "JOIN {content_field_person} AS signup_person_field ".
      "ON signup_node.vid = signup_person_field.vid ";
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = "JOIN {content_field_course_session} AS course_session_field ".
      "ON course_session_field.nid = ".
      "signup_fields.field_vol_signup_course_nid ";
  $where_type = "WHERE signup_node.type='volunteer_signup' ";
  $where_session = "AND course_session_field.field_course_session_nid = %d";

  $query = db_query($select . $from . $join_signup . $join_person . $join_session .
      $where_type . $where_session, $session_nid);

  return $query;
}

/**
 * print all of the issues
 * @param array signups the signup information. issues are listed under
 *     signups['issues']
 * @return the html formatted output
 */
function _print_issues ($signups) {
  $result = "<h1>Issues</h1>\n";
  // sort the issues by period (this will group and order based on period_nid
  // which is not necessarily meaningful)
  if (isset($signups['issues'])) {
    $result .= "<h2>Missing People</h2>\n";
    $result .= "<ul>\n";
    usort($signups['issues'], '_issue_sort');
  }
  if (isset($signups['issues'])) {
    foreach ($signups['issues'] as $issue) {
      $result .= "<li>[ERROR] ". _period_name($issue['period'])
          ." <a href=\"../../node/".
          $issue[signup] ."\">". $issue['course'] ."</a>";
      if (isset($issue['job'])) {
        $result .= "--" . $issue['job'];
      }
      $result .= "</li>\n";
    }
    $result .= "</ul>\n";
  }

  $result .= "<h2>Issues By Family</h2>\n";
  $result .= "<ul>\n";
  foreach ($signups['families'] as $family => $family_signups) {
    $issues = _print_family_issues($family, $family_signups);
    if (strlen($issues) != 0) {
      $result .= "<li>". $family ."<ul>\n";
      $result .= $issues;
      $result .= "</ul></li>\n";
    }
  }
  $result .= "</ul>\n";
  return $result;
}

/**
 * a sort function for the issues array we want to sort on the ['period'] value
 * @param array $a
 * @param array $b
 * @return number -1 if $a should come before $b. 1 if $b should come before $a
 *    0 if they're equal.
 */
function _issue_sort ($a, $b) {
  // just check the period
  if ($a['period'] == $b['period']) return 0;
  return ($a['period'] < $b['period']) ? -1 : 1;
}

/**
 * print the points summary
 * @param array $signups the signups array (@see _get_sorted_signups($session_nid))
 * @return string the html string to print
 */
function _print_points ($signups) {
  $result = "<ul>\n";
  // loop through the families
  $points = array();
  foreach ($signups['families'] as $family => $signups_for_family) {
    $points[$family] = $signups_for_family['points'];
  }
  arsort($points);
  $under12 = FALSE;
  foreach ($points as $family => $point_value) {
    // put a line between those that are 12+ and under 12 (the cut-off for discount)
    if ($point_value < 12 && !$under12) {
      $result .= "<hr/>\n";
      $under12 = TRUE;
    }
    $result .= "<li>". $family .": ". $point_value ."</li>\n";
  }
  $result .= "</ul>\n";
  return $result;
}

/**
 * print the fee summary
 * @param array $signups all signups
 * @param array $fees an array of fees indexed by course name
 * @return string the html string to print
 */
function _print_fees ($signups, $fees) {
  // START WITH FEES OWED TO TEACHERS (money to be collected)
  $result = "<h2>Fees to collect</h2>\n";
  $result .= "<ul>\n";
  foreach ($signups['families'] as $family => $family_signups) {
    if ($family_signups['fees'] != 0) {
      $fee = $family_signups['fees'];
      $result .= "<li>". $family .":: fees: ". _money($fee) ." paypal: ".
          _money(_paypal($fee)) ."</li>\n";
    }
  }
  $result .= "</ul>\n";

  // NOW FIGURE OUT FEES TO BE PAID TO TEACHERS (checks to write)
  $result .= "<h2>Fees to pay</h2>\n";
  $result .= "<ul>\n";
  $total = 0;
  foreach ($fees as $course => $fee_info) {
    $result .= "<li>". $course ." [". $fee_info['teachers'] ."] (".
        $fee_info['students'] ."): ". _money($fee_info['fees']) ."</li>\n";
    $total += $fee_info['fees'];
  }
  $result .= "</ul>\n";
  $result .= "<h2>TOTAL: ". _money($total) ."</h2>\n";
  return $result;
}

/**
 * return the printable version of the issues for one family
 * @param string $family the name of the family
 * @param array $family_signups the signups array for that family. It will contain
 *    'people' which has the signups and issues for each person in the family
 * @return string the result to print
 */
function _print_family_issues ($family, $family_signups) {
  foreach ($family_signups['people'] as $person => $person_signups) {
    if (isset($person_signups['issues'])) {
      foreach ($person_signups['issues'] as $issue) {
        $result .= "<li>";
        // if this is not a class period, this may not actually be an error
        if ($issue['problem'] == DOUBLE &&
            ($issue['period'] == BEFORE ||
             $issue['period'] == LUNCH ||
             $issue['period'] == AFTER)) {
          $result .= "[WARNING] ";
        } else {
          $result .= "[ERROR] ";
        }
        $result .= $person .': '. $issue['problem']
            ." ". _period_name($issue['period']);
        if ($issue['problem'] != MISSING) {
          $result .= " <a href=\"../../node/". $issue[signup1] ."\">".
              $issue['course1'] ."</a> and ".
              "<a href=\"../../node/". $issue[signup2] ."\">".
              $issue['course2'] ."</a>";
        }
        $result .= "</li>\n";
      }
    }
  }
  return $result;
}

/**
 * print the entire schedule page
 * @param array $signups the entire signups array, indexed first by family, then by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted listing of the information
 */
function _print_page($signups) {
  $result = _print_issues($signups);
  $result .= '<h1>All Signups</h1>';
  $result .= '<ul>';
  // loop through the families
  foreach ($signups['families'] as $family => $signups_for_family) {
    $result .= '<li>'. _print_one_family($family, $signups_for_family) .'</li>';
  }
  $result .= '</ul>';
  return $result;
}

/**
 * print the schedule for one family
 * @param string $family the name of the family
 * @param array $signups the signup information for that family, indexed by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted html output of the schedule
 */
function _print_one_family ($family, $signups) {
  // calculate points and for the family (they're already done per person)
  $result = "<h1>". $family ."</h1>\n";
  $result .= "points: ". $signups['points'];
  if ($signups['points'] < 12) {
    $result .= " (not eligible for discount next session)<br/>\n";
  } else {
    $result .= " (eligible for discount next session)<br/>\n";
  }
  $fees = $signups['fees'];
  if ($fees != 0) {
    $result .= " fees: ". _money($fees) ." paypal: ".
        _money(_paypal($fees)) ."\n";
  }
  $result .= "<table>";
  $result .= "<thead><tr><th></th><th>Before</th><th>Period 1</th><th>Period 2</th><th>Lunch</th>".
             "<th>Period 3</th><th>Period 4</th><th>After</th></tr></thead>\n";
  $result .= "<tbody>";
  $oddeven = "odd";
  foreach ($signups['people'] as $person => $signups_for_person) {
    $result .= _print_one_person($person, $signups_for_person, $oddeven);
    // switch odd/even
    if ($oddeven === "odd") $oddeven = "even"; else $oddeven = "odd";
  }
  $result .= "</tbody>";
  $result .= "</table>";
  return $result;
}

/**
 * print the schedule for one person
 * @param string $name the name of the person
 * @param array $signups the array containing information about this person's signups, indexed
 *        by the period nid for each period (blank if there is no assignment for a given period)
 * @param oddeven "odd" or "even" to be used in the tr class
 * @return a nicely formatted table row with the information for one person
 */
function _print_one_person ($name, $signups, $oddeven) {
  $result = "<tr class=\"". $oddeven ."\"><th>". $name ."</th>";
  $result .= _print_one_period(BEFORE, $signups);
  $result .= _print_one_period(PERIOD1, $signups);
  $result .= _print_one_period(PERIOD2, $signups);
  $result .= _print_one_period(LUNCH, $signups);
  $result .= _print_one_period(PERIOD3, $signups);
  $result .= _print_one_period(PERIOD4, $signups);
  $result .= _print_one_period(AFTER, $signups);
  $result .= "</tr>";
  return $result;
}

/**
 * print one period for one family
 * @param period the period nid to be printed
 * @param array $signups the signups array for this person, indexed by period, then
 *              with elements for 'course' and optionally 'job'. A missing entry means
 *              there is no assignment for that period (which is legal, so handle
 *              it gracefully)
 * @return string the <td></td> enclosed information for this period
 */
function _print_one_period ($period, $signups) {
  $result .= "<td>";
  if (isset($signups[$period])) {
    $result .= "<a href=\"../../node/". $signups[$period]['signup'] ."\">".
               $signups[$period]['course'] .'</a>';
    if (isset($signups[$period]['job'])) {
      $result .= "\n<em>". $signups[$period]['job'] .'</em>';
    }
  }
  $result .= '</td>';
  return $result;
}

/**
 * calculate the fee amount including paypal fees
 * @param int fee the fee owed to co-op
 * @return the fee including paypal fees
 */
function _paypal ($fees) {
  return ($fees+.3)/.971;
}

/**
 * take a number and format it as a dollar value
 * @param number $fees the number
 * @return string the formatted string
 */
function _money ($fees) {
  return sprintf("$%01.2f", $fees);
}

/**
 * convert the period nid to a word
 * @param period_nid the node id of the period
 */
function _period_name ($period_nid) {
  switch ($period_nid) {
    case BEFORE:
      return "Before";
    case PERIOD1:
      return "Period 1";
    case PERIOD2:
      return "Period 2";
    case LUNCH:
      return "Lunch";
    case PERIOD3:
      return "Period 3";
    case PERIOD4:
      return "Period 4";
    case AFTER:
      return "After";
  }
}