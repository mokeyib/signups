<?php
/**
 * @file
 * handle some stuff related to signing up for classes and volunteer
 * assignments
 */

// the node ids of the period nodes
define(BEFORE, 489);
define(PERIOD1, 490);
define(PERIOD2, 492);
define(LUNCH, 494);
define(PERIOD3, 496);
define(PERIOD4, 498);
define(AFTER, 499);
// the role ids for certain roles
define(PAID, 8);
define(MEMBER, 7);
// the possible problems in signups
define(MISSING, 'MISSING');
define(DOUBLE, 'DOUBLE');
define(MISSING_PERSON, 'MISSING PERSON');

/**
 * implementation of hook_help()
 */
function signups_help ($path, $arg) {
  if ($path == 'admin/help#schedule') {
    $txt = 'This module handles some stuff related to signing '.
           'up for classes and volunteer assignments.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_menu()
 */
function signups_menu () {
   // a page for getting signups for all paid members
   $items['admin/signups/%'] = array(
   	 'title' => 'Get Signups',
     'page callback' => '_get_signups',
     'page arguments' => array(2),
     'access arguments' => array('administer site configuration'),
     'type' => MENU_CALLBACK,
   );
   $items['schedule/family_schedule/%'] = array(
       'title' => 'Get Signups',
       'page callback' => '_get_family_signups',
       'page arguments' => array(2),
       'access arguments' => array('view own schedule'),
       'type' => MENU_CALLBACK,
   );

   return $items;
}

function signups_perm () {
  return array('view own schedule',
               'view all signups');
}

/**
 * get the signups for every person with the given role for the given session
 * @param int $session_name the name of the session (in the form of 2014 Winter)
 * @param int $role_id the role id to use
 * @return the html formatted output
 */
function _get_signups ($session_name) {
  // get the nid from the session_name
  $session_nid = _get_session_nid($session_name);

  // get all signups, indexed by family name, then person name
  $signups = _get_sorted_signups($session_nid);

  return _print_page($signups);
}

/**
 * get (and print) the schedule for the current family
 * @param string $session_name the session name in the form 2014 Winter
 * @return string the output for the page
 */
function _get_family_signups ($session_name) {
  // get all signups, indexed by family name, then person name
  $signups = _get_sorted_signups(_get_session_nid($session_name));

  // get the current family
  $family = _get_current_family_name();

  $result = "<hr/><h1>PLEASE DO NOT PAY YOUR FEES UNTIL AN ANNOUNCEMENT IS MADE ON THE E-GROUP. ".
      "FEES LISTED ARE AN ESTIMATE AND ARE SUBJECT TO CHANGE. ".
      "CLASSES MAY BE CANCELED IF THEY DO NOT FILL.</h1><hr/>\n";
  $result .= _print_one_family($family, $signups['families'][$family]);
  $result .= "<h1>Issues</h1>\n";
  $result .= _print_family_issues($family, $signups['families'][$family]);
  return $result;
}

/**
 * get the name of the family for the current user
 * @return the text name of the family for the current user
 */
function _get_current_family_name () {
  global $user;

  $query = db_query('SELECT node.title AS name '.
      'FROM {node} AS node '.
      'WHERE node.type = \'family\' AND node.uid = '. $user->uid);
  $family = db_fetch_object($query);
  return $family->name;
}

/**
 * given the session name, return the session nid
 * @param string $session_name the session name in the form 2014 Winter
 */
function _get_session_nid ($session_name) {
  $query = db_query('SELECT node.nid AS nid '.
      'FROM {node} AS node '.
      'WHERE node.title = \''. $session_name .'\'');
  $session = db_fetch_object($query);
  return $session->nid;
}

/**
 * get the signups, indexed by family name then person name. There will be two
 * top-level keys, 'issues' and 'families', with family information under 'families'
 * @param int $session_nid the session node id for the session whose signups
 *    to get
 * @return array of sorted signups
 */
function _get_sorted_signups ($session_nid) {
  // get all signups, indexed by person node id
  $signups = _get_signups_indexed_by_person($session_nid);

  // sort by family, and replace person node ids with names
  $sorted_signups = array();
  $sorted_signups['issues']['count'] = 0;
  foreach ($signups as $person_nid => $person_signups) {
    // person_nid can be blank (though this is not really expected, and is an issue
    // to be reported)
    if ($person_nid === '') {
      foreach ($person_signups as $key => $missing_signup) {
        if ($key != 'fees' && $key != 'points' && $key != 'issues') {
          $count = ++$sorted_signups['issues']['count'];
          $sorted_signups['issues'][$count]['problem'] = MISSING_PERSON;
          $sorted_signups['issues'][$count]['period'] = $key;
          $sorted_signups['issues'][$count]['course'] = $missing_signup['course'];
          $sorted_signups['issues'][$count]['signup'] = $missing_signup['signup'];
        }
      }
    } else {
      $person = _get_person($person_nid);
      $family = $person->family_name;
      $sorted_signups['families'][$family]['nid'] = $person->family_nid;
      $sorted_signups['families'][$family]['fees'] += $person_signups['fees'];
      $sorted_signups['families'][$family]['points'] += $person_signups['points'];
      $sorted_signups['families'][$family]['people'][$person->name] = $person_signups;
    }
  }

  // check through the families to make sure that everyone who
  // needs an assignment has one. If there's someone who is completely missing, add them
  foreach ($sorted_signups['families'] as $family => $family_signups) {
    $query = db_query('SELECT node.nid AS person_nid '.
        'FROM {node} AS node '.
        'JOIN {content_field_person_family} AS family_field '.
        'ON node.vid = family_field.vid '.
        'JOIN {content_field_person_no_assignment} AS gone '.
        'ON node.vid = gone.vid '.
        'WHERE (type=\'child\' or type=\'adult\') '.
        'AND gone.field_person_no_assignment_value = \'No\' '.
        'AND family_field.field_person_family_nid = '. $family_signups['nid']);
    // for each person in this family who needs an assignment each period...
    while ($person_obj = db_fetch_array($query)) {
      // get the information for this person given the nid
      $person = _get_person($person_obj['person_nid']);
      // if that person has _no_ assignments, add them
      if (!isset($signups[$person_obj['person_nid']])) {
        $sorted_signups['families'][$person->family_name]['people'][$person->name] = array();
      }
      // check if any of the required periods are missing for this person
      foreach (array(PERIOD1, PERIOD2, PERIOD3, PERIOD4) as $period) {
        $person_signups = $sorted_signups['families'][$person->family_name]['people'][$person->name];
        if (!isset($sorted_signups['families'][$person->family_name]['people'][$person->name][$period])) {
          if (!isset($sorted_signups['families'][$person->family_name]['people'][$person->name]['issues']['count'])) {
            $sorted_signups['families'][$person->family_name]['people'][$person->name]['issues']['count'] = 0;
          }
          $count = ++$sorted_signups['families'][$person->family_name]['people'][$person->name]['issues']['count'];
          $sorted_signups['families'][$person->family_name]['people'][$person->name]['issues'][$count]['problem'] = MISSING;
          $sorted_signups['families'][$person->family_name]['people'][$person->name]['issues'][$count]['period'] = $period;
        }
      }
    }
    // sort the names within the family
    ksort($sorted_signups['families'][$family]['people']);
  }

  // sort the families by key (family name)
  ksort($sorted_signups['families']);
  return $sorted_signups;
}
/**
 * for the given person, query to get the name and family information
 * @param int $person_nid the person node id
 * @return the person array including 'name', 'family_name', and 'family_nid'
 */
function _get_person ($person_nid) {
  $query = db_query('SELECT node.title AS name, '.
      'family.title AS family_name, '.
      'family.nid AS family_nid '.
      'FROM {node} AS node '.
      'JOIN {content_field_person_family} AS family_field '.
      'ON node.vid = family_field.vid '.
      'JOIN {node} AS family '.
      'ON family.nid = family_field.field_person_family_nid '.
      'WHERE node.nid = '. $person_nid);
  return db_fetch_object($query);
}

/**
 * get all the course signups and volunteer signups
 * @param int $session_nid the node id of the session
 * @return array the information, indexed by person node id. For each person, it's indexed
 *    by period node id. There's also fee and point information stored per person
 */
function _get_signups_indexed_by_person ($session_nid) {
  $signups = array();

  // *****************************
  // START WITH THE COURSE SIGNUPS

  // get all the course signups
  $query = _get_course_signup_query($session_nid);
  // each row is one signup for this this session.
  while ($row = db_fetch_array($query)) {
    // now get the title of the course and the period it is in
    $course = db_fetch_array(db_query('SELECT course_node.title AS course, '.
                                      'course_period_field.field_course_period_nid AS period_nid, '.
                                      'course_fee_field.field_course_fee_value AS fee '.
                                      'FROM {node} AS course_node '.
                                      'JOIN {content_type_course} AS course_period_field '.
                                      'ON course_node.vid = course_period_field.vid '.
                                      'JOIN {content_field_course_fee} AS course_fee_field '.
                                      'ON course_node.vid = course_fee_field.vid '.
                                      'WHERE course_node.nid = '. $row['course_nid']));
    // check if this is a double signup
    $period = $course['period_nid'];
    $person = $row['person_nid'];
    // if this is the first entry for this person, initialize counts
    if (!isset($signups[$person])) {
      $signups[$person]['points'] = 0;
      $signups[$person]['fees'] = 0;
      $signups[$person]['issues']['count'] = 0;
    }

    if (isset($signups[$person][$period])) {
      $count = ++$signups[$person]['issues']['count'];
      $signups[$person]['issues'][$count]['problem'] = DOUBLE;
      $signups[$person]['issues'][$count]['period'] = $period;
      $signups[$person]['issues'][$count]['course1'] = $course['course'];
      $signups[$person]['issues'][$count]['signup1'] = $row['signup_nid'];
      $signups[$person]['issues'][$count]['course2'] = $signups[$person][$period]['course'];
      $signups[$person]['issues'][$count]['signup2'] = $signups[$person][$period]['signup'];
    } else { // not a double -- just store the info
      $signups[$person][$period]['course'] = $course['course'];
      $signups[$person][$period]['signup'] = $row['signup_nid'];
      $signups[$person]['fees'] += $course['fee'];
    }
  }

  // *****************************
  // NOW DO THE VOLUNTEER SIGNUPS FOR THE SAME PERSON

  $query = _get_volunteer_signup_query($session_nid);
  // each row is one job for this person from this session.
  while ($row = db_fetch_array($query)) {
    // get the info about the course
    $course = db_fetch_array(db_query('SELECT course_node.title AS course, '.
                                      'course_period_field.field_course_period_nid AS period_nid '.
                                      'FROM {node} as course_node '.
                                      'JOIN {content_type_course} as course_period_field '.
                                      'ON course_node.vid = course_period_field.vid '.
                                      'WHERE course_node.nid = '. $row['course_nid']));
    $period = $course['period_nid'];
    $person = $row['person_nid'];
      // if this is the first entry for this person, initialize counts
    if (!isset($signups[$person])) {
      $signups[$person]['points'] = 0;
      $signups[$person]['fees'] = 0;
      $signups[$person]['issues']['count'] = 0;
    }
    // check if this is a double signup
    if (isset($signups[$person][$period])) {
      $count = ++$signups[$person]['issues']['count'];
      $signups[$person]['issues'][$count]['problem'] = DOUBLE;
      $signups[$person]['issues'][$count]['period'] = $period;
      $signups[$person]['issues'][$count]['course1'] = $course['course'];
      $signups[$person]['issues'][$count]['signup1'] = $row['signup_nid'];
      $signups[$person]['issues'][$count]['course2'] = $signups[$period]['course'];
      $signups[$person]['issues'][$count]['signup2'] = $signups[$period]['signup'];
    } else { // it's not a double, just store the info
      $signups[$person][$period]['course'] = $course['course'];
      $signups[$person][$period]['signup'] = $row['signup_nid'];
      // and the info about the job
      $job = db_fetch_array(db_query('SELECT job_node.title AS job, '.
                                     'job_fields.field_vol_job_points_value AS points '.
                                     'FROM {node} as job_node '.
                                     'JOIN {content_type_volunteer_job_type} AS job_fields '.
                                     'ON job_node.vid = job_fields.vid '.
                                     'WHERE job_node.nid = '. $row['job_nid']));
      $signups[$person][$period]['job'] = $job['job'];
      $signups[$person]['points'] += $job['points'];
    }
  }

  return $signups;
}

/**
 * build the query for course signups
 * @param int $session_nid the node id of the session
 * @return the db_query object to use with db_fetch_array
 *        the query will return 'course_nid', 'signup_nid',
 *        'person_nid'
 */
function _get_course_signup_query ($session_nid) {
  $select = 'SELECT signup_course_field.field_signup_course_nid AS course_nid, '.
            'signup_node.nid AS signup_nid, '.
            'signup_person_field.field_person_nid AS person_nid ';
  $from = 'FROM {node} AS signup_node ';
  // get access to the course field (so we can get the course nid to be used
  // in a separate query because this one is already too complex)
  $join_course = 'JOIN {content_type_course_signup} AS signup_course_field '.
                 'ON signup_node.vid = signup_course_field.vid ';
  // get access to the person field (so we can sort by person)
  $join_person = 'JOIN {content_field_person} AS signup_person_field '.
                 'ON signup_node.vid = signup_person_field.vid ';
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = 'JOIN {content_field_course_session} AS course_session_field '.
                  'ON course_session_field.nid = '.
                  'signup_course_field.field_signup_course_nid ';
  $where_type = 'WHERE signup_node.type=\'course_signup\' ';
  $where_session = 'AND course_session_field.field_course_session_nid = '. $session_nid;

  // get the course signups for this person
  $query = db_query($select . $from . $join_course . $join_person . $join_session .
                    $where_type . $where_session);

  return $query;
}

/**
 * build the query for course signups
 * @param int $session_nid the node id of the session
 * @return the db_query object to use with db_fetch_array
 *        the query will return 'job_nid', 'signup_nid',
 *        'person_nid', and 'course_nid'
 */
function _get_volunteer_signup_query ($session_nid) {
  $select = 'SELECT signup_fields.field_vol_job_nid AS job_nid, '.
      'signup_node.nid AS signup_nid, '.
      'signup_person_field.field_person_nid AS person_nid, '.
      'signup_fields.field_vol_signup_course_nid AS course_nid ';
  $from = 'FROM {node} AS signup_node ';
  // get access to the signup fields
  $join_signup = 'JOIN {content_type_volunteer_signup} AS signup_fields '.
      'ON signup_node.vid = signup_fields.vid ';
  // get access to the person field (so we can filter for the right person)
  $join_person = 'JOIN {content_field_person} AS signup_person_field '.
      'ON signup_node.vid = signup_person_field.vid ';
  // get access to the session, linked from the course (so we can filter
  // for the right session)
  $join_session = 'JOIN {content_field_course_session} AS course_session_field '.
      'ON course_session_field.nid = '.
      'signup_fields.field_vol_signup_course_nid ';
  $where_type = 'WHERE signup_node.type=\'volunteer_signup\' ';
  $where_session = 'AND course_session_field.field_course_session_nid = '. $session_nid;

  $query = db_query($select . $from . $join_signup . $join_person . $join_session .
      $where_type . $where_session);

  return $query;
}

/**
 * print all of the issues (remember to use " instead of ' to get escapes to work)
 */
function _print_issues ($signups) {
  $result = "<h1>Issues</h1>\n";
  $result .= "<ul>\n";
  for ($i = 1; $i <= $signups['issues']['count']; $i++) {
    $issue = $signups['issues'][$i];
    $result .= "<li> ". $issue['problem'] ." ".
        _get_period_name($issue['period']) ." ".
        "<a href=\"../../node/". $issue[signup] ."\">".
        $issue['course'] ."</a></li>\n";

  }
  $result .= "</ul>\n";

  $result .= "<ul>\n";
  foreach ($signups['families'] as $family => $family_signups) {
    $result .= _print_family_issues($family, $family_signups);
  }
  $result .= "</ul>\n";
  return $result;
}

/**
 * return the printable version of the issues for one family
 * @param string $family the name of the family
 * @param array $family_signups the signups array for that family. It will contain
 *    'people' which has the signups and issues for each person in the family
 * @return string the result to print
 */
function _print_family_issues ($family, $family_signups) {
  foreach ($family_signups['people'] as $person => $person_signups) {
    if (isset($person_signups['issues'])) {
      for ($i = 1; $i <= $person_signups['issues']['count']; $i++) {
        $issue = $person_signups['issues'][$i];
        $result .= "<li> ". $family .": ". $person .': '. $issue['problem'];
        if ($issue['problem'] == MISSING) {
          $result .= " ". _get_period_name($issue['period']);
        } else {
          $result .= " ". _get_period_name($issue['period']) ." ".
              "<a href=\"../../node/". $issue[signup1] ."\">".
              $issue['course1'] ."</a> and ".
              "<a href=\"../../node/". $issue[signup2] ."\">".
              $issue['course2'] ."</a>";
        }
        $result .= "</li>\n";
      }
    }
  }
  return $result;
}

/**
 * print the entire schedule page
 * @param array $signups the entire signups array, indexed first by family, then by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted listing of the information
 */
function _print_page($signups) {
  $result = _print_issues($signups);
  $result .= '<h1>All Signups</h1>';
  $result .= '<ul>';
  // loop through the families
  foreach ($signups['families'] as $family => $signups_for_family) {
    $result .= '<li>'. _print_one_family($family, $signups_for_family) .'</li>';
  }
  $result .= '</ul>';
  return $result;
}

/**
 * print the schedule for one family
 * @param string $family the name of the family
 * @param array $signups the signup information for that family, indexed by person
 *        within that family, then by period, then with entries for course and optionally job
 *        if a period is missing, it means no assignment for that period (which is legal)
 * @return a nicely formatted html output of the schedule
 */
function _print_one_family ($family, $signups) {
  // calculate points and for the family (they're already done per person)
  $result = "<h1>". $family ."</h1>\n";
  $result .= "points: ". $signups['points'];
  if ($signups['points'] < 12) {
    $result .= " (not eligible for discount next session)<br/>\n";
  } else {
    $result .= " (eligible for discount next session)<br/>\n";
  }
  $fees = $signups['fees'];
  if ($fees != 0) {
    $result .= sprintf(" fees: $%01.2f paypal: $%01.2f\n", $fees, ($fees+.3)/.971);
  }
  $result .= "<table>";
  $result .= "<thead><tr><th></th><th>Before</th><th>Period 1</th><th>Period 2</th><th>Lunch</th>".
             "<th>Period 3</th><th>Period 4</th><th>After</th></tr></thead>\n";
  $result .= "<tbody>";
  $oddeven = "odd";
  foreach ($signups['people'] as $person => $signups_for_person) {
    $result .= _print_one_person($person, $signups_for_person, $oddeven);
    // switch odd/even
    if ($oddeven === "odd") $oddeven = "even"; else $oddeven = "odd";
  }
  $result .= "</tbody>";
  $result .= "</table>";
  return $result;
}

/**
 * print the schedule for one person
 * @param string $name the name of the person
 * @param array $signups the array containing information about this person's signups, indexed
 *        by the period nid for each period (blank if there is no assignment for a given period)
 * @param oddeven "odd" or "even" to be used in the tr class
 * @return a nicely formatted table row with the information for one person
 */
function _print_one_person ($name, $signups, $oddeven) {
  $result = "<tr class=\"". $oddeven ."\"><th>". $name ."</th>";
  $result .= _print_one_period(BEFORE, $signups);
  $result .= _print_one_period(PERIOD1, $signups);
  $result .= _print_one_period(PERIOD2, $signups);
  $result .= _print_one_period(LUNCH, $signups);
  $result .= _print_one_period(PERIOD3, $signups);
  $result .= _print_one_period(PERIOD4, $signups);
  $result .= _print_one_period(AFTER, $signups);
  $result .= "</tr>";
  return $result;
}

/**
 * print one period for one family
 * @param period the period nid to be printed
 * @param array $signups the signups array for this person, indexed by period, then
 *              with elements for 'course' and optionally 'job'. A missing entry means
 *              there is no assignment for that period (which is legal, so handle
 *              it gracefully)
 * @return string the <td></td> enclosed information for this period
 */
function _print_one_period ($period, $signups) {
  $result .= "<td>";
  if (isset($signups[$period])) {
    $result .= "<a href=\"../../node/". $signups[$period]['signup'] ."\">".
               $signups[$period]['course'] .'</a>';
    if (isset($signups[$period]['job'])) {
      $result .= "\n<em>". $signups[$period]['job'] .'</em>';
    }
  }
  $result .= '</td>';
  return $result;
}

/**
 * convert the period nid to a word
 * @param period_nid the node id of the period
 */
function _get_period_name ($period_nid) {
  switch ($period_nid) {
    case BEFORE:
      return "Before";
    case PERIOD1:
      return "Period 1";
    case PERIOD2:
      return "Period 2";
    case LUNCH:
      return "Lunch";
    case PERIOD3:
      return "Period 3";
    case PERIOD4:
      return "Period 4";
    case AFTER:
      return "After";
  }
}